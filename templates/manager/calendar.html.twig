{% extends "manager/manager.html.twig" %}

{% block title %}Calendario - {{ client_name }}{% endblock %}

{% block heads %}
    <link rel="stylesheet" href="/static/css/calendar/calendar.css">
    <script src="/static/js/calendar/calendar.js"></script>
{% endblock %}

{% block section_content %}
<div class="col-10">
    <div id="calendar-prev-day-arrow" class="col-1 left-arrow-container"><</div><div id="calendar-title" class="col-10" data-date="{{ date|date('Y-m-d') }}"></div><div id="calendar-next-day-arrow" class="col-1 right-arrow-container">></div>
    <div id="calendar" class="col-12"></div>
</div>
<div class="col-4"></div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const calendarTitle = document.getElementById('calendar-title');
        const leftArrow = document.querySelector('.left-arrow-container');
        const rightArrow = document.querySelector('.right-arrow-container');

        const currentDate = new Date(calendarTitle.dataset.date);
        personColors = [];

        calendarTitle.textContent = currentDate.toLocaleDateString('es-ES', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });

        function getEventsFromData(data) {
            events = [];

            data.forEach(event => {
                event.professionalIds.forEach((professionalId) => {
                    events.push({
                        name: event.category + (event.clients.length > 1 ? '' : ': ' + event.clients[0].firstName),
                        startDate: new Date(event.startDateTime),
                        endDate: new Date(event.endDateTime),
                        personId: professionalId,
                        type: event.clients.length > 1 ? 'group' : 'appointment',
                        url: '{{ path("edit_session", {sessionId: "*event.id*"}) }}'.replace('*event.id*', event.id)
                    });
                });
            });

            return events;
            
        }

        function getPersonsFromData(data) {
            if (data.length === 0) {
                return [
                    {
                        id: 'no id',
                        name: 'No hay eventos',
                        color: '{{ primaryColor }}'
                    }
                ];
            }

            let persons = [];

            data.forEach((event) => {
                if (!persons.some(person => person.id === event.professionalIds[0])) {
                    if (personColors[event.professionalIds[0]] === undefined) {
                        personColors[event.professionalIds[0]] = generateCompatibleDarkColor('{{ primaryColor }}');
                    }
                    persons.push({
                        id: event.professionalIds[0],
                        name: event.professionals[0].firstName,
                        color: personColors[event.professionalIds[0]]
                    });
                }
            });
           
            return persons.sort((a, b) => a.name.localeCompare(b.name));
        }

        function updateCalendarView(date) {
            fetch('{{ path("api_get_sessions") }}?startDateTimeFrom=' + date + ' 00:00:00&startDateTimeTo=' + date + ' 23:59:59&endDateTimeFrom=' + date + ' 00:00:00&endDateTimeTo=' + date + ' 23:59:59')
                .then(response => response.json())
                .then(data => {
                    // Actualizar solo la sección del calendario
                    calendarTitle.textContent = currentDate.toLocaleDateString('es-ES', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                    
                    // Actualizar el calendario después de recibir los nuevos datos
                    calendar.updateCalendar(getPersonsFromData(data), getEventsFromData(data), currentDate);
                })
                .catch(error => console.error('Error:', error));
        }

        function navigateCalendar(action) {            
            if (action === 'next') {
                currentDate.setDate(currentDate.getDate() + 1);
            } else if (action === 'prev') {
                currentDate.setDate(currentDate.getDate() - 1);
            }

            const newDate = currentDate.toISOString().split('T')[0];
            updateCalendarView(newDate);
        }

        function generateCompatibleDarkColor(baseColor, contrastThreshold = 50, minLuminance = 60) {
            // Convierte un color HEX a RGB
            function hexToRgb(hex) {
                let bigint = parseInt(hex.replace("#", ""), 16);
                return {
                    r: (bigint >> 16) & 255,
                    g: (bigint >> 8) & 255,
                    b: bigint & 255
                };
            }

            // Convierte RGB a HEX
            function rgbToHex(r, g, b) {
                return `#${((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1)}`;
            }

            // Calcula la luminosidad relativa (perceptiva) de un color
            function luminance(r, g, b) {
                return 0.299 * r + 0.587 * g + 0.114 * b;
            }

            let baseRgb = hexToRgb(baseColor);
            let baseLuminance = luminance(baseRgb.r, baseRgb.g, baseRgb.b);
            let newColor;

            do {
                // Genera un color aleatorio oscuro
                let randomRgb = {
                    r: Math.floor(Math.random() * 100),  // Valores bajos generan colores más oscuros
                    g: Math.floor(Math.random() * 100),
                    b: Math.floor(Math.random() * 100)
                };

                // Calcula el brillo del color generado
                let newLuminance = luminance(randomRgb.r, randomRgb.g, randomRgb.b);

                // Asegura que el contraste con el color base sea suficiente y que sea lo bastante oscuro
                if (Math.abs(newLuminance - baseLuminance) > contrastThreshold && newLuminance < minLuminance) {
                    newColor = rgbToHex(randomRgb.r, randomRgb.g, randomRgb.b);
                }
            } while (!newColor);

            return newColor;
        }

        leftArrow.addEventListener('click', () => navigateCalendar('prev'));
        rightArrow.addEventListener('click', () => navigateCalendar('next'));

        const config = {
            persons: [],
            events: [],
            timeRange: {
                start: 8,
                end: 21
            },
            gridSize: 15,
            theme: {
                backgroundColor: '{{ primaryColor | mix_color("#FFFFFF", 15) }}',
                borderRadius: '{{ borderRadius }}',
                borderColor: '{{ borderColor }}'
            },
            date: currentDate,
            showTimeIndicator: true,
        };

        const calendar = new DailyCalendar('#calendar', config);

        navigateCalendar('');
    });
</script>
{% endblock %}
{% block styles %}
{{ parent() }}
    #calendar-title {
        display: flex;
        font-size: 2rem;
        font-weight: 500;
        margin-bottom: 1rem;
        justify-content: center;
    }

    .left-arrow-container, .right-arrow-container {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 2rem;
        font-weight: 500;
        cursor: pointer;
    }
{% endblock %}