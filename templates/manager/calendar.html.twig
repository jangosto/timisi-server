{% extends "manager/manager.html.twig" %}

{% block title %}Calendario - {{ client_name }}{% endblock %}

{% block heads %}
    <link rel="stylesheet" href="/static/css/calendar/calendar.css">
    <script src="/static/js/calendar/calendar.js"></script>
{% endblock %}

{% block section_content %}
<div class="col-10">
    <div id="calendar-prev-day-arrow" class="col-1 left-arrow-container"><</div><div id="calendar-title" class="col-10" data-date="{{ date|date('Y-m-d') }}"></div><div id="calendar-next-day-arrow" class="col-1 right-arrow-container">></div>
    <div id="calendar" class="col-12"></div>
</div>
<div class="col-4"></div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const calendarTitle = document.getElementById('calendar-title');
        const leftArrow = document.querySelector('.left-arrow-container');
        const rightArrow = document.querySelector('.right-arrow-container');

        const currentDate = new Date(calendarTitle.dataset.date);

        calendarTitle.textContent = currentDate.toLocaleDateString('es-ES', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });

        function getEventsFromData(data) {
            return data.map(event => {
                return {
                    name: event.name,
                    startDate: new Date(event.startDateTime),
                    endDate: new Date(event.endDateTime),
                    personId: event.personId,
                    type: event.type,
                    patientName: event.patientName
                };
            });
        }

        function getPersonsFromData(data) {
            return data.map(event => {
                return {
                    id: event.personId,
                    name: event.firstName,
                    color: event.personColor
                };
            });
        }

        function updateCalendarView(date) {
            fetch('{{ path("api_get_session") }}?startDateTimeFrom=' + date + ' 00:00:00&startDateTimeTo=' + date + ' 23:59:59&endDateTimeFrom=' + date + ' 00:00:00&endDateTimeTo=' + date + ' 23:59:59')
                .then(response => response.json())
                .then(data => {
                    // Actualizar solo la sección del calendario
                    calendarTitle.textContent = currentDate.toLocaleDateString('es-ES', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                    
                    // Actualizar el calendario después de recibir los nuevos datos
                    calendar.updateCalendar(getPersonsFromData(data), getEventsFromData(data));
                })
                .catch(error => console.error('Error:', error));
        }

        function navigateCalendar(action) {            
            if (action === 'next') {
                currentDate.setDate(currentDate.getDate() + 1);
            } else {
                currentDate.setDate(currentDate.getDate() - 1);
            }

            const newDate = currentDate.toISOString().split('T')[0];
            updateCalendarView(newDate);
        }

        leftArrow.addEventListener('click', () => navigateCalendar('prev'));
        rightArrow.addEventListener('click', () => navigateCalendar('next'));

        const config = {
            persons: [
                { id: 1, name: "Juan", color: "#4CAF50" },
                { id: 2, name: "María", color: "#2196F3" },
                { id: 3, name: "Carlos", color: "#F44336" },
                { id: 4, name: "Fran", color: "#d68910" }
            ],
            events: [
                
                {
                    name: "Evento 8 - Fran",
                    startDate: new Date(2025, 1, 28, 17, 15),
                    endDate: new Date(2025, 1, 28, 18, 15),
                    personId: 4,
                    type: "appointment|group",
                    patientName: "Verónica Peña"
                }
            ],
            timeRange: {
                start: 8,
                end: 21
            },
            gridSize: 15,
            theme: {
                backgroundColor: '{{ primaryColor | mix_color("#FFFFFF", 15) }}',
                borderRadius: '{{ borderRadius }}',
                borderColor: '{{ borderColor }}'
            }
        };

        const calendar = new DailyCalendar('#calendar', config);
    });
</script>
{% endblock %}
{% block styles %}
{{ parent() }}
    #calendar-title {
        display: flex;
        font-size: 2rem;
        font-weight: 500;
        margin-bottom: 1rem;
        justify-content: center;
    }

    .left-arrow-container, .right-arrow-container {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 2rem;
        font-weight: 500;
        cursor: pointer;
    }
{% endblock %}