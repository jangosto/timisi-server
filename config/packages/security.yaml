security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: argon2id
            time_cost: 4  # Incrementa la dificultad del c√°lculo
            memory_cost: 65536  # 64 MB de memoria para mitigar ataques de hardware especializado

    providers:
        dbal_user_provider:
            id: Infrastructure\Security\Provider\UserProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/login
            stateless: false
            provider: dbal_user_provider
            form_login:
                login_path: login
                check_path: login
            login_throttling:
                max_attempts: 5
                interval: '5 minutes'

        main:
            lazy: true
            provider: dbal_user_provider
            form_login: ~
            entry_point: form_login
            logout:
                path: logout
                target: /

    access_control:
        #- { path: ^/manager, roles: ROLE_MANAGER }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
